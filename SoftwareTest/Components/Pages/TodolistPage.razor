@page "/todolist"
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using SoftwareTest.ModelsTodo
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject TodoContext TodoDb
@using SoftwareTest.Services
@inject AsymmetricEncryptionHandler AsymmetricHandler

<h3 class="mt-4 mb-3 text-center">My Todo List</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">@ErrorMessage</div>
}

@if (IsLoaded)
{
    <div class="container" style="max-width: 500px;">
        <ul class="list-group mb-3">
            @foreach (var item in TodoItems)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@item.DecryptedItem</strong><br />
                        <small class="text-muted">Created: @GetItemTime(item.Item).ToString("g")</small>
                    </div>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteItem(item.Id)">Delete</button>
                </li>
            }
        </ul>

        <div class="input-group mb-3">
            <input @bind="NewItem" class="form-control" placeholder="Add new todo item..." />
            <button class="btn btn-primary" @onclick="AddItem">Add</button>
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}

@code {
    private string? UserId;
    private List<Todolist> TodoItems = new();
    private string NewItem = string.Empty;
    private string? ErrorMessage;
    private bool IsLoaded = false;

    private Dictionary<string, DateTime> ItemTimestamps = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            Navigation.NavigateTo("/Identity/Account/Login");
            return;
        }

        UserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(UserId))
        {
            Navigation.NavigateTo("/Identity/Account/Login");
            return;
        }

        var cprEntry = await TodoDb.Cprs.FirstOrDefaultAsync(c => c.User == UserId);
        if (cprEntry == null)
        {
            Navigation.NavigateTo("/cprsetup");
            return;
        }

        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (!query.AllKeys.Contains("verified") || query["verified"] != "true")
        {
            var returnUrl = "/todolist?verified=true";
            Navigation.NavigateTo($"/cprverify?returnUrl={Uri.EscapeDataString(returnUrl)}");
            return;
        }

        await LoadTodoItems(cprEntry.CprNr);
    }

    private async Task LoadTodoItems(string cprNr)
    {
        TodoItems = await TodoDb.Todolists
            .Where(t => t.UserId == cprNr)
            .ToListAsync();

        foreach (var item in TodoItems)
        {
            item.DecryptedItem = AsymmetricHandler.Decrypt(item.Item);
        }

        IsLoaded = true;
    }

    private async Task AddItem()
    {
        if (string.IsNullOrWhiteSpace(NewItem))
        {
            ErrorMessage = "Please enter a valid item.";
            return;
        }

        var cprEntry = await TodoDb.Cprs.FirstOrDefaultAsync(c => c.User == UserId);
        if (cprEntry == null)
        {
            Navigation.NavigateTo("/cprsetup");
            return;
        }

        // Encrypt the item
        string encryptedItem = AsymmetricHandler.Encrypt(NewItem);

        // Check for duplicates
        if (TodoItems.Any(t => t.Item == encryptedItem))
        {
            ErrorMessage = "This item already exists in your list.";
            return;
        }

        // Create a new item
        var todo = new Todolist
        {
            UserId = cprEntry.CprNr,
            Item = encryptedItem
        };

        // Detach tracked entities to avoid tracking conflicts
        TodoDb.ChangeTracker.Clear();

        TodoDb.Todolists.Add(todo);
        await TodoDb.SaveChangesAsync();

        NewItem = string.Empty;
        await LoadTodoItems(cprEntry.CprNr);
    }


    private async Task DeleteItem(int id)
    {
        var todoItem = await TodoDb.Todolists.FindAsync(id);
        if (todoItem != null)
        {
            TodoDb.Todolists.Remove(todoItem);
            await TodoDb.SaveChangesAsync();

            ItemTimestamps.Remove(todoItem.Item);

            await LoadTodoItems(todoItem.UserId);
        }
    }

    private DateTime GetItemTime(string itemName)
    {
        if (ItemTimestamps.TryGetValue(itemName, out var time))
        {
            return time;
        }
        return DateTime.Now;
    }
}
